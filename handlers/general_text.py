from aiogram import types
from loader import dp, bot
from data.data import admin_id
from aiogram.dispatcher import FSMContext
from work import sql
from work.Ssh import ssh_console, Ssh_console, ssh_console_command, search_mac
from work.admin import mess, AllMessage
from work.keyboard import main_menu
# from work.Add_filial import NewFilial, Add_snmp
from work.Statistics import info_filial, check_registrator, link, version_po
from work.keyboard import keyboard_other, region, keyboard_back, keyboard_search, main_menu_user
from work.Keyboard_menu import key_registrator, menu_region, menu_filials, menu_filial
from work.subscription import worksub, reg_menu


@dp.message_handler(state=Ssh_console.command)
async def process_name(message: types.Message, state: FSMContext):
    text = await ssh_console_command(message, state)
    await message.answer(text=text)


@dp.message_handler(state=AllMessage.message)
async def process_name(message: types.Message, state: FSMContext):
    await mess(message, state)

data = {}

#
# @dp.message_handler(state=NewFilial.loopback)
# async def process_name(message: types.Message, state: FSMContext):
#     if message.text == "111":
#         await message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=main_menu())
#         await state.finish()
#     else:
#         # ip = message.text.split(".")[1:3]
#         # print(ip)
#         request = f"SELECT count(kod) FROM filial WHERE loopback = '{message.text}' and sdwan = 1"
#         if (await sql.sql_selectone(request))[0] == 1:
#             await message.answer("–§–∏–ª–∏–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=main_menu())
#             await state.finish()
#         else:
#             data['loopback'] = message.text
#             await NewFilial.next()
#             await message.answer(f"Loopback: {data['loopback']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –∫–∞–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ 1–°")
#
#
# @dp.message_handler(state=NewFilial.name)
# async def process_name(message: types.Message, state: FSMContext):
#     if message.text == "111":
#         await message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=main_menu())
#         await state.finish()
#     else:
#         data['name'] = message.text
#         await NewFilial.next()
#         await message.answer(f"Loopback: {data['loopback']}\n–§–∏–ª–∏–∞–ª: {data['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω",
#                              reply_markup=await region())
#
#
# @dp.message_handler(state=NewFilial.region)
# async def process_name(message: types.Message, state: FSMContext):
#     if message.text == "111":
#         await message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=main_menu())
#         await state.finish()
#     else:
#         data['region'] = message.text
#         await state.finish()
#         await message.answer(f"–ò–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞\n"
#                              f"Loopback: {data['loopback']}\n"
#                              f"–§–∏–ª–∏–∞–ª: {data['name']}\n"
#                              f"–†–µ–≥–∏–æ–Ω: {data['region']}", reply_markup=main_menu())
#         kod = await Add_snmp(message=message, data=data).snmp_sysName()
#         status = await info_filial(kod)
#         await message.answer(status)
#



@dp.callback_query_handler(text="menu")
async def market(call: types.CallbackQuery):
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", reply_markup=await menu_region())




@dp.message_handler(lambda c: c.from_user.id in admin_id, text="–†–∞–∑–Ω–æ–µ")
async def work(message: types.Message):
    await message.answer("–†–∞–∑–Ω–æ–µ", reply_markup=keyboard_other())

#
# @dp.message_handler(lambda c: c.from_user.id in admin_id, text="–î–æ–±–∞–≤–∏—Ç—å")
# async def work(message: types.Message):
#     await NewFilial.loopback.set()
#     await message.answer(text="–í–≤–µ–¥–∏—Ç–µ Loopback –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ 111 –¥–ª—è –æ—Ç–º–µ–Ω—ã",
#                          reply_markup=keyboard_back())


@dp.message_handler(lambda c: c.from_user.id in admin_id, text="–ù–∞–∑–∞–¥")
async def work(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())


@dp.message_handler(lambda c: c.from_user.id in admin_id, text="–ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def work(message: types.Message):
    await message.answer("–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞", reply_markup=main_menu_user())


@dp.message_handler(lambda c: c.from_user.id in admin_id, text="üö´ –û—Ç–º–µ–Ω–∞")
async def work(message: types.Message):
    await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=main_menu())


@dp.message_handler(lambda c: c.from_user.id in admin_id, text="–í–µ—Ä—Å–∏—è –ü–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def work(message: types.Message):
    await message.answer(text=await version_po(message))


@dp.message_handler(lambda c: c.from_user.id in admin_id, text="–ü–æ–∏—Å–∫")
async def work(message: types.Message):
    await message.answer("–ü–æ–∏—Å–∫", reply_markup=keyboard_search())





@dp.message_handler(lambda c: c.from_user.id in admin_id, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
async def work(message: types.Message):
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", reply_markup=await key_registrator())


@dp.message_handler(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def work(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", reply_markup=await worksub(message, call=""))


@dp.message_handler(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def work(message: types.Message):
    await message.answer(await check_registrator(message))


@dp.message_handler(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
async def work(message: types.Message):
    text = "–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n" \
           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    await message.answer(text=text, reply_markup=await link())


@dp.message_handler(content_types=types.ContentTypes.ANY)
async def work(message: types.Message):
    if message.text[:1] == "/":
        text = message.text[1:]
        kod = (await sql.sql_selectone(f"SELECT ssh_kod FROM users WHERE id = {message.from_user.id}"))[0]
        text = await search_mac(message.from_user.id, kod, text, message)
        await message.answer(text)
    else:
        await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")

# elif message.text == "–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å":
#     await sql.sql_insert(f'DELETE FROM cisco')
#     await sql.sql_insert(f'DELETE FROM registrator')
#     await sql.sql_insert(f'DELETE FROM status')
#     request = f"SELECT loopback, name, region, kod FROM filial ORDER by name"
#     rows = await sql.sql_select(request)
#     for row in rows:
#         data['loopback'] = row[0]
#         data['name'] = row[1]
#         data['region'] = (await sql.sql_selectone(f"SELECT name FROM region WHERE id = {row[2]}"))[0]
#         data['kod'] = row[3]
#         await message.answer(f"–ò–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞\n"
#                              f"Loopback: {data['loopback']}\n"
#                              f"–§–∏–ª–∏–∞–ª: {data['name']}\n"
#                              f"–†–µ–≥–∏–æ–Ω: {data['region']}", reply_markup=main_menu())
#         status = await Add_snmp(message=message, data=data).snmp_sysName()
#         await message.answer(status)
# elif message.text == "–ü–æ–∏—Å–∫":
#     await message.answer("–ü–æ–∏—Å–∫", reply_markup=keyboard_search())
#
# elif message.text == "–ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
#     await message.answer("–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞",
#     reply_markup=main_menu_user())
# elif message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã":
#     await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", reply_markup=await key_registrator(message))
# elif message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", reply_markup=await worksub(message, call=""))
# elif message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
#     await message.answer(await check_registrator(message))
# elif message.text == "üö´ –û—Ç–º–µ–Ω–∞":
#
# elif message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
#     text = "–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n" \
#            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
#     await message.answer(text=text, reply_markup=await link())
